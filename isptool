#!/usr/bin/env python3
import argparse
import cmd
from periphery import I2C

chipids = {
    0xf0: "infinity2m - SSD20x",
    0xf5: "pioneer3 - SSD212",
}

i2caddr = 0x59


class ISP:
    CHANNEL_DRAM = 0  # maybe
    CHANNEL_PM = 3
    CHANNEL_NONPM = 4

    CMD_BYTE_CHANNEL_BIT0_CLEAR = 0x80
    CMD_BYTE_CHANNEL_BIT0_SET = 0x81
    CMD_BYTE_CHANNEL_BIT1_CLEAR = 0x82
    CMD_BYTE_CHANNEL_BIT1_SET = 0x83
    CMD_BYTE_CHANNEL_BIT2_CLEAR = 0x84
    CMD_BYTE_CHANNEL_BIT2_SET = 0x85

    REG_PM_UARTDISABLE = 0xe12  # 0x1c24
    PM_UARTDISABLE_BIT = 1 << 11
    REG_PM_CHIPID = 0x1ecc  # 0x3d98

    def __init__(self, i2c):
        self.i2c = i2c

    def serial_debug_handshake(self):
        txfr = [I2C.Message([0x53, 0x45, 0x52, 0x44, 0x42])]
        self.i2c.transfer(i2caddr, txfr)

    def disconnect(self):
        txfr = [I2C.Message([0x34]), I2C.Message([0x45])]
        self.i2c.transfer(i2caddr, txfr)

    def set_channel(self, channel):
        txfr = []

        if channel & 0x1:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT0_SET]))
        else:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT0_CLEAR]))

        if channel & 0x2:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT1_SET]))
        else:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT1_CLEAR]))

        if channel & 0x4:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT2_SET]))
        else:
            txfr.append(I2C.Message([ISP.CMD_BYTE_CHANNEL_BIT2_CLEAR]))

        txfr.append(I2C.Message([0x53]))
        txfr.append(I2C.Message([0x7f]))
        txfr.append(I2C.Message([0x35]))
        txfr.append(I2C.Message([0x71]))

        self.i2c.transfer(i2caddr, txfr)

    def create_set_address_message_bytes(self, addr):
        return [0x10, (addr >> 24) & 0xff, (addr >> 16) & 0xff, (addr >> 8) & 0xff, addr & 0xff]

    def set_address(self, addr):
        # txfr = [I2C.Message([0x10, 0x00, 0x00, 0x30, 0x00])]
        txfr = [I2C.Message(self.create_set_address_message_bytes(addr))]
        self.i2c.transfer(i2caddr, txfr)

    def read_pm_byte(self, bank):
        self.set_channel(ISP.CHANNEL_PM)
        self.set_address(bank)
        msgs = [I2C.Message([0x0], read=True)]
        self.i2c.transfer(i2caddr, msgs)
        return msgs[0].data[0]

    def read_pm_word(self, bank):
        self.set_channel(ISP.CHANNEL_PM)
        self.set_address(bank)
        msgs = [I2C.Message([0, 0], read=True)]
        self.i2c.transfer(i2caddr, msgs)
        return msgs[0].data[0] | msgs[0].data[1] << 8

    def write_pm_word(self, bank, word):
        self.set_channel(ISP.CHANNEL_PM)
        data = self.create_set_address_message_bytes(bank)
        data.append(word & 0xff)
        data.append((word >> 8) & 0xff)
        msgs = [I2C.Message(data)]
        self.i2c.transfer(i2caddr, msgs)

    def dram_read(self):
        self.set_channel(ISP.CHANNEL_DRAM)
        self.set_address(0x7000000)
        msgs = [I2C.Message(bytearray(32), read=True)]
        self.i2c.transfer(i2caddr, msgs)
        return msgs[0].data

    def dram_write(self):
        self.set_channel(ISP.CHANNEL_DRAM)
        self.set_address(0x7000000)
        msgs = [I2C.Message(bytearray(32), read=True)]
        self.i2c.transfer(i2caddr, msgs)
        return msgs[0].data


class IspShell(cmd.Cmd):
    intro = 'isptool. Type help or ? to list commands.\n'
    prompt = '(isptool) '

    def __init__(self, isp):
        super(IspShell, self).__init__()
        self.isp = isp

    def do_dr(self, arg):
        """Read DRAM"""
        data = self.isp.dram_read()
        print(data)

    def do_dw(self, arg):
        """Write DRAM"""

    def do_rrb(self, arg):
        """Read a byte from a register"""
        print("yo")
        print(arg)

    def do_rrw(self, arg):
        """Read a word from a register"""
        print("yo")

    def do_rrd(self, arg):
        """Read a dword from a register"""
        print("yo")

    def do_rwb(self, arg):
        """Write a byte to a register"""
        print("yo")

    def do_rww(self, arg):
        """Write a word to a register"""
        print("yo")

    def do_rwd(self, arg):
        """Write a dword to a register"""
        print("yo")


def main():
    parser = argparse.ArgumentParser(description='MStar/SigmaStar i2c ISP tool.')
    parser.add_argument('--i2cdev', type=str, required=True, help='Path to the i2cdev file')

    args = parser.parse_args()

    i2c = I2C(args.i2cdev)
    isp = ISP(i2c)

    # The vendor tools seem to do a handshake then a disconnect
    # maybe to make sure everything is in sync. Not sure if
    # it's needed but whatever.
    isp.serial_debug_handshake()
    isp.disconnect()

    # Enable serial debug
    isp.serial_debug_handshake()

    chipid = isp.read_pm_byte(ISP.REG_PM_CHIPID)

    if chipid in chipids:
        print("Connected, Chip id: %s (%02x)" % (chipids[chipid], chipid))
    else:
        print("Connected, Unknown chip id: %02x" % chipid)

    # Disable the UART
    uartdisable = isp.read_pm_word(ISP.REG_PM_UARTDISABLE)
    isp.write_pm_word(ISP.REG_PM_UARTDISABLE, uartdisable & ~ISP.PM_UARTDISABLE_BIT)

    IspShell(isp).cmdloop()

    # Reenable UART
    isp.write_pm_word(ISP.REG_PM_UARTDISABLE, uartdisable | ISP.PM_UARTDISABLE_BIT)

    # Disconnect
    isp.disconnect()

    i2c.close()


if __name__ == '__main__':
    main()
